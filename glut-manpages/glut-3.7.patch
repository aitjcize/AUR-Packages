diff -Nur glut-3.7/man/gle/Makefile glut-3.7.mod/man/gle/Makefile
--- glut-3.7/man/gle/Makefile	1970-01-01 08:00:00.000000000 +0800
+++ glut-3.7.mod/man/gle/Makefile	2011-04-09 14:03:46.623329586 +0800
@@ -0,0 +1,30 @@
+#!smake
+#
+# Copyright (c) Mark J. Kilgard, 1995.
+#
+
+IDB_TAG = GLUT_DEV_MAN
+IDB_PATH = $(DESTDIR)/usr/share/man/man3
+
+MANPAGES = $(shell ls *.man)
+
+FORMATTED = $(MANPAGES:.man=.3xgle)
+
+
+.SUFFIXES: .man .3xgle
+
+default all: $(FORMATTED)
+
+postscript: $(POSTSCRIPT)
+
+install:
+	mkdir -p $(IDB_PATH)
+	for i in `ls *.3xgle`; do \
+		install -m 644 $$i $(IDB_PATH); \
+	done
+	
+.man.3xgle: %.man
+	cp $< $*.3xgle
+
+clobber clean:
+	-rm -rf *.3xgle *.nr *.ps *.o *~
Binary files glut-3.7/man/gle/.Makefile.swp and glut-3.7.mod/man/gle/.Makefile.swp differ
diff -Nur glut-3.7/man/gle/test/usr/share/man/man3/gle.3xgle glut-3.7.mod/man/gle/test/usr/share/man/man3/gle.3xgle
--- glut-3.7/man/gle/test/usr/share/man/man3/gle.3xgle	1970-01-01 08:00:00.000000000 +0800
+++ glut-3.7.mod/man/gle/test/usr/share/man/man3/gle.3xgle	2011-04-09 14:03:58.343329583 +0800
@@ -0,0 +1,66 @@
+.\"
+.\" GLE Tubing & Extrusions Library Documentation 
+.\"
+.TH gle 3GLE "3.6" "GLE" "GLE"
+.SH NAME
+gle - an introduction to the GLE Tubing & Extrusions Library
+.SH SYNOPSIS
+.nf
+.LP
+#include <GL/tube.h>
+.fi
+.SH DESCRIPTION
+The GLE Tubing and Extrusion Library is a graphics application
+programming interface (API). The library consists of a number of "C"
+language subroutines for drawing tubing and extrusions. The library is
+distributed in source code form, in a package that includes
+documentation, a VRML proposal, Makefiles, and full source code and
+header files. It uses the OpenGL (TM) programming API to perform the
+actual drawing of the tubing and extrusions.
+
+A "sweep" or "extrusion" is a 2D contour (polyline) that is swept or
+extruded along a 3D path (polyline). For example, sweeping a circle
+along a straight line will generate a cylinder.  Sweeping a circle
+along a circular path will generate a doughnut (torus).
+
+The library also includes a set of utility routines for drawing some of
+the more common extruded shapes: a polycylinder, a polycone, a
+generalized torus (circle swept along a helical path), a "helix"
+(arbitrary contour swept along a helical path) and a "lathe" (arbitrary
+contour swept along a helical path, with torsion used to keep the
+contour aligned).
+
+The most general extrusion supported by this library allows an
+arbitrary 2D contour to be swept around an arbitrary 3D path. A set of
+normal vectors can be specified to go along with the contour; the
+normal vectors determine the appearance of the contour when lighting is
+turned on. A set of colors and affine matrices can be specified to go
+along with the 3D path.  The colors are used to color along the path.
+The affine matrices are used to operate on the contour as it is swept
+along. If no affine matrices are specified, the contour is extruded
+using the mathematical concept of "parallel translation" or "Gaussian
+translation". That is, the contour is moved (and drawn) along the
+extrusion path in a "straight" manner. If there are affine matrices,
+they are applied to the contour at each extrusion segment before the
+segment is drawn.
+
+The affine matrices allow work in a quasi-non-Euclidean space. They
+essentially allow the contour to be distorted as it is swept along. The
+allow the contour to be rotated, translated and rescaled as it is
+drawn. For example, a rescaling will turn a polycylinder into a
+poly-cone, since the circle that is being extruded is scaled to a
+different size at each extrusion vertex. A rotation allows the contour
+to be spun around while it is being extruded, thus for instance
+allowing drill-bit type shapes to be drawn. A translation allows the
+appearance of shearing in real space; that is, taking a contour and
+displacing it, without otherwise bending it. Note that the affines are
+2x3 matrices, not 3x4 matrices, since they apply to the 2D contour as
+it is being extruded.
+.SH WEB SITE
+http://linas.org/gle/index.html
+.SH SEE ALSO
+gleExtrusion, gleHelicoid, gleLathe, glePolyCone, glePolyCylinder,
+gleScrew, gleSetJoinStyle, gleSpiral, gleSuperExtrusion, gleTextureMode,
+gleToroid, gleTwistExtrusion, gleTwistExtrusion, gleSuperExtrusion
+.SH AUTHOR
+Linas Vepstas (linas@fc.net)
diff -Nur glut-3.7/man/gle/test/usr/share/man/man3/gleExtrusion.3xgle glut-3.7.mod/man/gle/test/usr/share/man/man3/gleExtrusion.3xgle
--- glut-3.7/man/gle/test/usr/share/man/man3/gleExtrusion.3xgle	1970-01-01 08:00:00.000000000 +0800
+++ glut-3.7.mod/man/gle/test/usr/share/man/man3/gleExtrusion.3xgle	2011-04-09 14:03:58.343329583 +0800
@@ -0,0 +1,57 @@
+.\"
+.\" GLE Tubing & Extrusions Library Documentation 
+.\"
+.TH gleExtrusion 3GLE "3.6" "GLE" "GLE"
+.SH NAME
+gleExtrusion - Extrude arbitrary 2D contour along arbitrary 3D path.
+.SH SYNTAX
+.nf
+.LP
+void gleExtrusion (int ncp,
+                gleDouble contour[][2],
+                gleDouble cont_normal[][2],
+                gleDouble up[3],
+                int npoints,
+                gleDouble point_array[][3],
+                float color_array[][3]);
+.fi
+.SH ARGUMENTS
+.IP \fIncp\fP 1i
+number of contour points
+.IP \fIcontour\fP 1i
+2D contour
+.IP \fIcont_normal\fP 1i
+2D contour normals
+.IP \fIup\fP 1i
+up vector for contour
+.IP \fInpoints\fP 1i
+numpoints in poly-line
+.IP \fIpoint_array\fP 1i
+polyline vertices
+.IP \fIcolor_array\fP 1i
+colors at polyline verts
+.SH DESCRIPTION
+
+Extrude arbitrary 2D contour along arbitrary 3D path. The argument
+"contour" specifies the 2D contour to be extruded, while the argument
+"point_array" specifies the path along which to extrude.  The vector
+"up" defines the orientation of the contour y-axis in real 3D space.
+
+Note that neither the very first segment, nor the very last segment are
+drawn. The first and last segments serve only to define the angle of
+the join at the very ends of the polyline. Thus, to draw one segment,
+three must be specified. To draw two segments, four must be specified,
+etc.
+
+The normal array may be NULL. If it is, normal vectors will NOT be
+automatically generated, and the object will look terrible when lit.
+
+The color array may be NULL. If NULL, the current color is used. If not
+NULL, the glColor3f() routine is used to set the color; therefore,
+specifying the glColorMaterial() subroutine before this primitive can
+be used to set diffuse, specular, ambient, etc. colors.
+
+.SH SEE ALSO
+gleTwistExtrusion, gleSuperExtrusion
+.SH AUTHOR
+Linas Vepstas (linas@fc.net)
diff -Nur glut-3.7/man/gle/test/usr/share/man/man3/gleHelicoid.3xgle glut-3.7.mod/man/gle/test/usr/share/man/man3/gleHelicoid.3xgle
--- glut-3.7/man/gle/test/usr/share/man/man3/gleHelicoid.3xgle	1970-01-01 08:00:00.000000000 +0800
+++ glut-3.7.mod/man/gle/test/usr/share/man/man3/gleHelicoid.3xgle	2011-04-09 14:03:58.346662916 +0800
@@ -0,0 +1,48 @@
+.\"
+.\" GLE Tubing & Extrusions Library Documentation 
+.\"
+.TH gleHelicoid 3GLE "3.6" "GLE" "GLE"
+.SH NAME
+gleHelicoid - Generalized torus, spiral with circle contour.
+.SH SYNTAX
+.nf
+.LP
+void gleHelicoid (gleDouble rToroid,
+                  gleDouble up[3],
+                  gleDouble startRadius,
+                  gleDouble drdTheta,
+                  gleDouble startZ,
+                  gleDouble dzdTheta,
+                  gleDouble startXform[2][3],
+                  gleDouble dXformdTheta[2][3],
+                  gleDouble startTheta,
+                  gleDouble sweepTheta);
+.fi
+.SH ARGUMENTS
+.IP \fIrToroid\fP 1i
+circle contour (torus) radius
+.IP \fIstartRadius\fP 1i
+spiral starts in x-y plane
+.IP \fIdrdTheta\fP 1i
+change in radius per revolution
+.IP \fIstartZ\fP 1i
+starting z value
+.IP \fIdzdTheta\fP 1i
+change in Z per revolution
+.IP \fIstartXform\fP 1i
+starting contour affine transformation
+.IP \fIdXformdTheta\fP 1i
+tangent change xform per revolution
+.IP \fIstartTheta\fP 1i
+start angle in x-y plane
+.IP \fIsweepTheta\fP 1i
+degrees to spiral around
+.SH DESCRIPTION
+
+Generalized Torus. Similar to gleSpiral, except contour is a circle.
+Uses gleSpiral to draw.
+
+.SH SEE ALSO
+gleSpiral, gleToroid
+.SH AUTHOR
+Linas Vepstas (linas@fc.net)
diff -Nur glut-3.7/man/gle/test/usr/share/man/man3/gleLathe.3xgle glut-3.7.mod/man/gle/test/usr/share/man/man3/gleLathe.3xgle
--- glut-3.7/man/gle/test/usr/share/man/man3/gleLathe.3xgle	1970-01-01 08:00:00.000000000 +0800
+++ glut-3.7.mod/man/gle/test/usr/share/man/man3/gleLathe.3xgle	2011-04-09 14:03:58.346662916 +0800
@@ -0,0 +1,62 @@
+.\"
+.\" GLE Tubing & Extrusions Library Documentation 
+.\"
+.TH gleLathe 3GLE "3.6" "GLE" "GLE"
+.SH NAME
+gleLathe - Sweep using a Z-axis shear to create an arbitrary contour along a helical path.
+.SH SYNTAX
+.nf
+.LP
+void gleLathe (int ncp,
+                gleDouble contour[][2],
+                gleDouble cont_normal[][2],
+                gleDouble up[3],
+                gleDouble startRadius,     /* spiral starts in x-y plane */
+                gleDouble drdTheta,        /* change in radius per revolution */
+                gleDouble startZ,          /* starting z value */
+                gleDouble dzdTheta,        /* change in Z per revolution */
+                gleDouble startXform[2][3], /* starting contour affine xform */
+                gleDouble dXformdTheta[2][3], /* tangent change xform per revoln */
+                gleDouble startTheta,      /* start angle in x-y plane */
+                gleDouble sweepTheta);     /* degrees to spiral around */
+.fi
+.SH ARGUMENTS
+.IP \fIncp\fP 1i
+number of contour points
+.IP \fIcontour\fP 1i
+2D contour
+.IP \fIcont_normal\fP 1i
+2D contour normals
+.IP \fIup\fP 1i
+up vector for contour
+.IP \fIstartRadius\fP 1i
+spiral starts in x-y plane
+.IP \fIdrdTheta\fP 1i
+change in radius per revolution
+.IP \fIstartZ\fP 1i
+starting z value
+.IP \fIdzdTheta\fP 1i
+change in Z per revolution
+.IP \fIstartXform\fP 1i
+starting contour affine transformation
+.IP \fIdXformdTheta\fP 1i
+tangent change xform per revolution
+.IP \fIstartTheta\fP 1i
+start angle in x-y plane
+.IP \fIsweepTheta\fP 1i
+degrees to spiral around
+.SH DESCRIPTION
+
+Sweep an arbitrary contour along a helical path. The sweep will be
+performed as a shear along the z-axis, so that the orientation of the
+contour is displaced, rather than translated, as the contour is swept.
+
+The axis of the helix lies along the modeling coordinate z-axis.
+
+An affine transform can be applied as the contour is swept. For most
+ordinary usage, the affines should be given as NULL.
+
+.SH SEE ALSO
+gleSpiral
+.SH AUTHOR
+Linas Vepstas (linas@fc.net)
diff -Nur glut-3.7/man/gle/test/usr/share/man/man3/glePolyCone.3xgle glut-3.7.mod/man/gle/test/usr/share/man/man3/glePolyCone.3xgle
--- glut-3.7/man/gle/test/usr/share/man/man3/glePolyCone.3xgle	1970-01-01 08:00:00.000000000 +0800
+++ glut-3.7.mod/man/gle/test/usr/share/man/man3/glePolyCone.3xgle	2011-04-09 14:03:58.349996249 +0800
@@ -0,0 +1,42 @@
+.\"
+.\" GLE Tubing & Extrusions Library Documentation 
+.\"
+.TH glePolyCone 3GLE "3.6" "GLE" "GLE"
+.SH NAME
+glePolyCone - Draw polycone, specified as a polyline with radii.
+.SH SYNTAX
+.nf
+.LP
+void glePolyCone(int npoints,
+                 gleDouble point_array[][3],
+                 float color_array[][3],
+                 gleDouble radius_array[]);
+.fi
+.SH ARGUMENTS
+.IP \fInpoints\fP 1i
+numpoints in poly-line
+.IP \fIpoint_array\fP 1i
+polyline vertices
+.IP \fIcolor_array\fP 1i
+colors at polyline verts
+.IP \fIradius_array\fP 1i
+cone radii at polyline
+.SH DESCRIPTION
+
+Draw polycone, specified as a polyline with radii.
+
+Note that neither the very first segment, nor the very last segment are
+drawn. The first and last segments serve only to define the angle of
+the join at the very ends of the polyline. Thus, to draw one segment,
+three must be specified. To draw two segments, four must be specified,
+etc.
+
+The color array may be NULL. If NULL, the current color is used. If not
+NULL, the glColor3f() routine is used to set the color; therefore,
+specifying the glColorMaterial() subroutine before this primitive can
+be used to set diffuse, specular, ambient, etc. colors.
+
+.SH SEE ALSO
+glePolyCylinder
+.SH AUTHOR
+Linas Vepstas (linas@fc.net)
diff -Nur glut-3.7/man/gle/test/usr/share/man/man3/glePolyCylinder.3xgle glut-3.7.mod/man/gle/test/usr/share/man/man3/glePolyCylinder.3xgle
--- glut-3.7/man/gle/test/usr/share/man/man3/glePolyCylinder.3xgle	1970-01-01 08:00:00.000000000 +0800
+++ glut-3.7.mod/man/gle/test/usr/share/man/man3/glePolyCylinder.3xgle	2011-04-09 14:03:58.349996249 +0800
@@ -0,0 +1,42 @@
+.\"
+.\" GLE Tubing & Extrusions Library Documentation 
+.\"
+.TH glePolyCylinder 3GLE "3.6" "GLE" "GLE"
+.SH NAME
+glePolyCylinder - Draw polycylinder, specified as a polyline. 
+.SH SYNTAX
+.nf
+.LP
+void glePolyCylinder(int npoints,
+                     gleDouble point_array[][3],
+                     float color_array[][3],
+                     gleDouble radius);
+.fi
+.SH ARGUMENTS
+.IP \fInpoints\fP 1i
+numpoints in poly-line
+.IP \fIpoint_array\fP 1i
+polyline vertices
+.IP \fIcolor_array\fP 1i
+colors at polyline verts
+.IP \fIradius\fP 1i
+cylinder radius
+.SH DESCRIPTION
+
+Draw polycylinder, specified as a polyline.
+
+Note that neither the very first segment, nor the very last segment are
+drawn. The first and last segments serve only to define the angle of
+the join at the very ends of the polyline. Thus, to draw one segment,
+three must be specified. To draw two segments, four must be specified,
+etc.
+
+The color array may be NULL. If NULL, the current color is used. If not
+NULL, the glColor3f() routine is used to set the color; therefore,
+specifying the glColorMaterial() subroutine before this primitive can
+be used to set diffuse, specular, ambient, etc. colors.
+
+.SH SEE ALSO
+glePolyCone
+.SH AUTHOR
+Linas Vepstas (linas@fc.net)
diff -Nur glut-3.7/man/gle/test/usr/share/man/man3/gleScrew.3xgle glut-3.7.mod/man/gle/test/usr/share/man/man3/gleScrew.3xgle
--- glut-3.7/man/gle/test/usr/share/man/man3/gleScrew.3xgle	1970-01-01 08:00:00.000000000 +0800
+++ glut-3.7.mod/man/gle/test/usr/share/man/man3/gleScrew.3xgle	2011-04-09 14:03:58.353329582 +0800
@@ -0,0 +1,43 @@
+.\"
+.\" GLE Tubing & Extrusions Library Documentation 
+.\"
+.TH gleScrew 3GLE "3.6" "GLE" "GLE"
+.SH NAME
+gleScrew - Draws screw-type shapes.
+.SH SYNTAX
+.nf
+.LP
+void gleScrew (int ncp,
+               gleDouble contour[][2],
+               gleDouble cont_normal[][2],
+               gleDouble up[3],
+	       gleDouble startz,
+	       gleDouble endz,
+	       gleDouble twist);
+.fi
+.SH ARGUMENTS
+.IP \fIncp\fP 1i
+number of contour points
+.IP \fIcontour\fP 1i
+2D contour
+.IP \fIcont_normal\fP 1i
+2D contour normals
+.IP \fIup\fP 1i
+up vector for contour
+.IP \fIstartx\fP 1i
+start of segment
+.IP \fIendz\fP 1i
+end of segment
+.IP \fItwist\fP 1i
+number of rotations
+.SH DESCRIPTION
+
+Draws screw-type shapes. Takes a contour, and extrudes it along the
+z-axis, from a start z value of startz to an end z-value of endz.
+During the extrusion, it will spin the contour along the contour origin
+by twist degrees.
+
+.SH SEE ALSO
+gleExtrusion
+.SH AUTHOR
+Linas Vepstas (linas@fc.net)
diff -Nur glut-3.7/man/gle/test/usr/share/man/man3/gleSetJoinStyle.3xgle glut-3.7.mod/man/gle/test/usr/share/man/man3/gleSetJoinStyle.3xgle
--- glut-3.7/man/gle/test/usr/share/man/man3/gleSetJoinStyle.3xgle	1970-01-01 08:00:00.000000000 +0800
+++ glut-3.7.mod/man/gle/test/usr/share/man/man3/gleSetJoinStyle.3xgle	2011-04-09 14:03:58.353329582 +0800
@@ -0,0 +1,88 @@
+.\"
+.\" GLE Tubing & Extrusions Library Documentation 
+.\"
+.TH gleSetJoinStyle 3GLE "3.6" "GLE" "GLE"
+.SH NAME
+gleSetJoinStyle, gleGetJoinStyle - Query and Set the GLE join style flags.
+.SH SYNTAX
+.nf
+.LP
+void gleSetJoinStyle (int style);
+int gleGetJoinStyle (void);
+.fi
+.SH ARGUMENTS
+.IP \fIstyle\fP 1i
+bitwise OR of flags
+.SH DESCRIPTION
+
+Query and set the GLE join style flags. This word is a bitwise OR of
+the flags described below.
+
+The initial join style is TUBE_JN_ANGLE | TUBE_JN_CAP | TUBE_NORM_FACET. 
+
+.B "Extrusion Join Styles"
+.IP \fBTUBE_JN_RAW\fP
+Draw polycylinders, polycones, extrusions, etc. with no special
+treatment of the extrusion ends.
+.IP \fBTUBE_JN_ANGLE\fP
+Draw polycylinders, polycones, extrusions, etc. by extending the
+different segments until they butt into each other with an
+angular style.
+.IP \fBTUBE_JN_CUT\fP
+Draw polycylinders, polycones, extrusions, etc. by joining together the
+different segments and slicing off the joint at half the angle between
+the segments. A cap is drawn. Note that the slicing plane runs through
+the origin of the contour coordinate system. Thus, the amount of slice
+can be varied by offsetting the contour with respect to the origin.
+
+Note that when two segments meet at a shallow angle, the cut join style
+will potentially shave off a whole lot of the contour, leading to
+"surprising" results...
+.IP \fBTUBE_JN_ROUND\fP
+Joints will be rounded. Strictly speaking, the part of the joint above
+the origin will be rounded. The part below the origin will come
+together in an angular join.
+.IP \fBTUBE_JN_MASK\fP
+Mask bits. This can be used to mask off the bit field that defines the
+join style.
+
+.B "End Caps"
+.IP \fBTUBE_JN_CAP\fP
+If this is set, a cap will be drawn at each end of the extrusion. 
+
+.B "Automatic Normal Vector Generation"
+.IP \fBTUBE_NORM_FACET\fP
+A normal vector is generated per facet. Useful for having an extrusion
+have a "faceted" look, such as when extruding a square -- each of the
+four sides of the square will look flat.
+.IP \fBTUBE_NORM_EDGE\fP
+Normal vectors are generated so that they lie along edges. Useful for
+making angular things look rounded under lighting. For example, when
+extruding a hexagon and using this flag, the hexagonal extrusion will
+look (more like a) smooth perfectly round cylinder, rather than a
+six-sided shape.
+.IP \fBTUBE_NORM_PATH_EDGE\fP
+Normal vectors are generated so that they both lie on edges, and so
+that they interpolate between neighboring segments. Useful for drawing
+"spaghetti" -- extrusions that follow a spline path.  Because the
+spline path must be "tessellated" into small straight segments, each
+segment will look straight unless this flag is set.
+.IP \fBTUBE_NORM_MASK\fP
+A mask useful for masking out the "norm" bits. 
+
+.B "Closed or Open Contours"
+.IP \fBTUBE_CONTOUR_CLOSED\fP
+If this bit is set, the contour will be treated as a "closed" contour,
+where the last point connects back up to the first. It is useful to set
+this flag when drawing closed shapes (such as extruded cylinders,
+star-shapes, I-Beams, etc. When drawing open extrusions (e.g.
+corrugated sheet metal), you DON'T want to set this flag.
+
+.SH BUGS
+
+Multiple threads using GLE share a single global join style.
+
+.SH SEE ALSO
+gleExtrusion, gleTextureMode
+.SH AUTHOR
+Linas Vepstas (linas@fc.net)
diff -Nur glut-3.7/man/gle/test/usr/share/man/man3/gleSpiral.3xgle glut-3.7.mod/man/gle/test/usr/share/man/man3/gleSpiral.3xgle
--- glut-3.7/man/gle/test/usr/share/man/man3/gleSpiral.3xgle	1970-01-01 08:00:00.000000000 +0800
+++ glut-3.7.mod/man/gle/test/usr/share/man/man3/gleSpiral.3xgle	2011-04-09 14:03:58.356662915 +0800
@@ -0,0 +1,110 @@
+.\"
+.\" GLE Tubing & Extrusions Library Documentation 
+.\"
+.TH gleSpiral 3GLE "3.6" "GLE" "GLE"
+.SH NAME
+gleSpiral - Sweep an arbitrary contour along a helical path.
+.SH SYNTAX
+.nf
+.LP
+void gleSpiral (int ncp,
+                gleDouble contour[][2],
+                gleDouble cont_normal[][2],
+                gleDouble up[3],
+                gleDouble startRadius,     /* spiral starts in x-y plane */
+                gleDouble drdTheta,        /* change in radius per revolution */
+                gleDouble startZ,          /* starting z value */
+                gleDouble dzdTheta,        /* change in Z per revolution */
+                gleDouble startXform[2][3], /* starting contour affine xform */
+                gleDouble dXformdTheta[2][3], /* tangent change xform per revoln */
+                gleDouble startTheta,      /* start angle in x-y plane */
+                gleDouble sweepTheta);     /* degrees to spiral around */
+.fi
+.SH ARGUMENTS
+.IP \fIncp\fP 1i
+number of contour points
+.IP \fIcontour\fP 1i
+2D contour
+.IP \fIcont_normal\fP 1i
+2D contour normals
+.IP \fIup\fP 1i
+up vector for contour
+.IP \fIstartRadius\fP 1i
+spiral starts in x-y plane
+.IP \fIdrdTheta\fP 1i
+change in radius per revolution
+.IP \fIstartZ\fP 1i
+starting z value
+.IP \fIdzdTheta\fP 1i
+change in Z per revolution
+.IP \fIstartXform\fP 1i
+starting contour affine transformation
+.IP \fIdXformdTheta\fP 1i
+tangent change xform per revolution
+.IP \fIstartTheta\fP 1i
+start angle in x-y plane
+.IP \fIsweepTheta\fP 1i
+degrees to spiral around
+.SH DESCRIPTION
+
+Sweep an arbitrary contour along a helical path. 
+
+The axis of the helix lies along the modeling coordinate z-axis. 
+
+An affine transform can be applied as the contour is swept. For most
+ordinary usage, the affines should be given as NULL.
+
+The "startXform[][]" is an affine matrix applied to the contour to
+deform the contour. Thus, "startXform" of the form
+
+     |  cos     sin    0   |
+     |  -sin    cos    0   |
+
+will rotate the contour (in the plane of the contour), while 
+
+     |  1    0    tx   |
+     |  0    1    ty   |
+
+will translate the contour, and 
+
+     |  sx    0    0   |
+     |  0    sy    0   |
+
+scales along the two axes of the contour. In particular, note that 
+
+     |  1    0    0   |
+     |  0    1    0   |
+
+is the identity matrix. 
+
+The "dXformdTheta[][]" is a differential affine matrix that is
+integrated while the contour is extruded.  Note that this affine matrix
+lives in the tangent space, and so it should have the form of a
+generator.  Thus, dx/dt's of the form
+
+     |  0     r    0   |
+     |  -r    0    0   |
+
+rotate the the contour as it is extruded (r == 0 implies no rotation, r
+== 2*PI implies that the contour is rotated once, etc.), while
+
+     |  0    0    tx   |
+     |  0    0    ty   |
+
+translates the contour, and 
+
+     |  sx    0    0   |
+     |  0    sy    0   |
+
+scales it. In particular, note that 
+
+     |  0    0    0   |
+     |  0    0    0   |
+
+is the identity matrix -- i.e. the derivatives are zero, and therefore
+the integral is a constant.
+
+.SH SEE ALSO
+gleLathe
+.SH AUTHOR
+Linas Vepstas (linas@fc.net)
diff -Nur glut-3.7/man/gle/test/usr/share/man/man3/gleSuperExtrusion.3xgle glut-3.7.mod/man/gle/test/usr/share/man/man3/gleSuperExtrusion.3xgle
--- glut-3.7/man/gle/test/usr/share/man/man3/gleSuperExtrusion.3xgle	1970-01-01 08:00:00.000000000 +0800
+++ glut-3.7.mod/man/gle/test/usr/share/man/man3/gleSuperExtrusion.3xgle	2011-04-09 14:03:58.356662915 +0800
@@ -0,0 +1,64 @@
+.\"
+.\" GLE Tubing & Extrusions Library Documentation 
+.\"
+.TH gleSuperExtrusion 3GLE "3.6" "GLE" "GLE"
+.SH NAME
+gleSuperExtrusion - Extrude arbitrary 2D contour along arbitrary 3D path, specifying local affine transformations.
+.SH SYNTAX
+.nf
+.LP
+void gleSuperExtrusion (int ncp,
+                gleDouble contour[][2],
+                gleDouble cont_normal[][2],
+                gleDouble up[3],
+                int npoints,
+                gleDouble point_array[][3],
+                float color_array[][3],
+		gleDouble xform_array[][2][3]);
+.fi
+.SH ARGUMENTS
+.IP \fIncp\fP 1i
+number of contour points
+.IP \fIcontour\fP 1i
+2D contour
+.IP \fIcont_normal\fP 1i
+2D contour normals
+.IP \fIup\fP 1i
+up vector for contour
+.IP \fInpoints\fP 1i
+numpoints in poly-line
+.IP \fIpoint_array\fP 1i
+polyline vertices
+.IP \fIcolor_array\fP 1i
+colors at polyline verts
+.IP \fIxform_array\fP 1i
+2D contour affine transforms
+.SH DESCRIPTION
+
+Extrude arbitrary 2D contour along arbitrary 3D path, specifying local
+affine transformations. As the contour is extruded, the affine will be
+applied to the points in the contour.
+
+The argument "contour" specifies the 2D contour to be extruded, while
+the argument "point_array" specifies the path along which to extrude.
+The vector "up" defines the orientation of the contour y-axis in real
+3D space.
+
+Note that neither the very first segment, nor the very last segment are
+drawn. The first and last segments serve only to define the angle of
+the join at the very ends of the polyline. Thus, to draw one segment,
+three must be specified. To draw two segments, four must be specified,
+etc.
+
+The normal array may be NULL. If it is, normal vectors will NOT be
+automatically generated, and the object will look terrible when lit.
+
+The color array may be NULL. If NULL, the current color is used. If not
+NULL, the glColor3f() routine is used to set the color; therefore,
+specifying the glColorMaterial() subroutine before this primitive can
+be used to set diffuse, specular, ambient, etc. colors.
+
+.SH SEE ALSO
+gleExtrusion, gleTwistExtrusion
+.SH AUTHOR
+Linas Vepstas (linas@fc.net)
diff -Nur glut-3.7/man/gle/test/usr/share/man/man3/gleTextureMode.3xgle glut-3.7.mod/man/gle/test/usr/share/man/man3/gleTextureMode.3xgle
--- glut-3.7/man/gle/test/usr/share/man/man3/gleTextureMode.3xgle	1970-01-01 08:00:00.000000000 +0800
+++ glut-3.7.mod/man/gle/test/usr/share/man/man3/gleTextureMode.3xgle	2011-04-09 14:03:58.359996248 +0800
@@ -0,0 +1,160 @@
+.\"
+.\" GLE Tubing & Extrusions Library Documentation 
+.\"
+.TH gleTextureMode 3GLE "3.6" "GLE" "GLE"
+.SH NAME
+gleTextureMode - set the type of GLE automatic texture coordinate generation.
+.SH SYNTAX
+.nf
+.LP
+void gleTextureMode (int mode);
+.fi
+.SH ARGUMENTS
+.IP \fImode\fP 1i
+bitwise OR of GLE texture mode flags
+.SH DESCRIPTION
+
+In addition to the default glTexGen modes that are supplied by OpenGL,
+the tubing library also contains some of its own automatic texture
+coordinate generation routines. In addition, user-defined texture coord
+generation routines can be supplied.
+
+To use texture mapping with the extrusion library, one must remember to "do the obvious": 
+.IP
+Enable texture mapping through OpenGL 
+.IP
+Define and load (glTexImage2D/glBindTexture) a texture 
+.IP
+If using the routine below, then disable glTexgGen 
+.LP
+gleTextureMode can be used to set the type of automatic texture
+coordinate generation to be used. The argument should be a bitwise-OR
+of any of the following flags:
+.IP \fBGLE_TEXTURE_ENABLE\fP
+If this bit is set, then texturing is enabled. If this bit is NOT set,
+then automatic texture coordinate generation is disabled.
+.LP
+The way in which the automatic texture coordinate generation occurs is
+determined by one of the following flags. One and only one of these
+should be selected at a time. These tokens are enumerants, not
+bit-flags.
+.IP \fBGLE_TEXTURE_VERTEX_FLAT\fP
+Uses the vertexes "x" coordinate as the texture "u" coordinate, and the
+accumulated segment length as the "v" coordinate.
+.IP \fBGLE_TEXTURE_NORMAL_FLAT\fP
+Uses the normal vector's "x" coordinate as the texture "u" coordinate,
+and the accumulated segment length as the "v" coordinate.
+.IP \fBGLE_TEXTURE_VERTEX_CYL\fP
+Uses u = phi/(2*pi) = arctan (vy/vx)/(2*pi) as the texture "u"
+coordinate, and the accumulated segment length as the "v" coordinate.
+In the above equation, "vx" and "vy" stand for the vertex's x and y
+coordinates.
+.IP \fBGLE_TEXTURE_NORMAL_CYL\fP
+Uses u = phi/(2*pi) = arctan (ny/nx)/(2*pi) as the texture "u"
+coordinate, and the accumulated segment length as the "v" coordinate.
+In the above equation, "nx" and "ny" stand for the normal's x and y
+coordinates.
+.IP \fBGLE_TEXTURE_VERTEX_SPH\fP
+Uses u = phi/(2*pi) = arctan (vy/vx)/(2*pi) as the texture "u"
+coordinate, and v = theta/pi = (1.0 - arccos(vz))/pi as the texture "v"
+coordinate. In the above equation, "vx","vy" and "vz" stand for the
+vertex's x, y and z coordinates.
+.IP \fBGLE_TEXTURE_NORMAL_SPH\fP
+Uses u = phi/(2*pi) = arctan (ny/nx)/(2*pi) as the texture "u"
+coordinate, and v = theta/pi = (1.0 - arccos(nz))/pi as the texture "v"
+coordinate. In the above equation, "nx","ny" and "nz" stand for the
+normal's x, y and z coordinates.
+.IP \fBGLE_TEXTURE_VERTEX_MODEL_FLAT\fP
+.IP \fBGLE_TEXTURE_NORMAL_MODEL_FLAT\fP
+.IP \fBGLE_TEXTURE_VERTEX_MODEL_CYL\fP
+.IP \fBGLE_TEXTURE_NORMAL_MODEL_CYL\fP
+.IP \fBGLE_TEXTURE_VERTEX_MODEL_SPH\fP
+.IP \fBGLE_TEXTURE_NORMAL_MODEL_SPH\fP
+These define texture mapping modes that are very similar to those
+described above, except that the untransformed vertices and/or normals
+are used. As a result, textures tends to stick to the extrusion
+according to the extrusions local surface coordinates rather than
+according to real-space coordinates. This will in general provide the
+correct style of texture mapping when affine transforms are being
+applied to the contour, since the coordinates used are those prior to
+the affine transform.
+.SH OPERATION
+To best understand how to use the above functions, it is best to
+understand how the tubing is actually drawn. Let us start by defining
+some terms. The tubing library "extrudes" a "contour" along a "path".
+The contour is a 2D polyline. The path is a 3D polyline. We use the
+word "segment" to refer to a straight-line segment of the path
+polyline. We also interchangeably use the word "segment" to stand for
+the section of the extrusion that lies along a path segment.
+
+The tubing library draws segments one at a time. It uses glPushmatrix()
+and glPopmatrix() to orient each segment along the negative z-axis. The
+segment starts at z=0 and ends at some negative z-value (equal to the
+length of the segment). The segment is then drawn by calling
+glVertex3f() (and glNormal3F()) by drawing the 2D contour at z=0 and
+again at z=-len. (Of course, if the join style is one of the fancy
+ones, then the end-points are trimmed in a variety of ways, and do not
+land exactly on z=0, or z=-len, but they do come close). Note that
+glBegin() and glEnd() are called around each segment. (Note also that
+additional glBegins/Ends may be called to draw end-caps or filleting
+triangles for the more complex join styles.)
+
+The obvious way to automatically generate textures is to warp the
+glVertex() and glNormal() functions, and compute texture coordinates
+based on the 3-space vertex and normal coordinates. This is essentially
+what the tubing code does, except that it passes some extra parameters.
+The glBegin calls are wrapped, and the integer segment number and the
+floating-point length of the segment are passed in. By knowing the
+segment number, and the segment length, the texture coordinates can be
+adjusted. Knowing the length allows the length to be accumulated, so
+that a texture is applied lengthwise along the extrusion. It is this
+accumulated length that is used in the FLAT and CYL mapping modes.
+
+For each vertex, not only are the vertex x,y,z coordinates available,
+but so is a contour vertex counter indicating which contour vertex this
+corresponds to. There is also a flag indicating whether the vertex
+corresponds to a front or back vertex (i.e. a z=0 or z=-len vertex).
+Again, this info can be used to avoid confusion when drawing the more
+complex join styles.
+.SH HINTS
+Here are a few hints, tips, and techniques:
+.IP o
+Hint: Confused? RUN THE DEMOS! The best way to understand what all the
+different texture modes are doing is to see them in action.
+.IP o
+Hint: The texture matrix can be used to your advantage! That is, you
+can use glMatrixMode(GL_TEXTURE) to control how textures are mapped to
+the surface. In particular, you may/will want to use it to to rescale
+the V coordinate.
+.IP o
+The origin of the contour will in general change the vertex x's and
+y's, thus changing the texture coordinates.
+.IP o
+The contour "up" vector will NOT influence the texture coordinates. 
+.IP o
+For the FLAT and CYL modes, the accumulated length really is the
+accumulated length of the segments in modeling coordinates. Unless the
+extrusion is very small, this length will probably be much larger than
+1.0, and so the resulting texture coordinate will wrap. You will
+generally want to rescale the "V" coordinate to make the texture map
+fit.
+.IP o
+If the texture is "swimming" around on the surface in an undesired way,
+try using the "MODEL" version of the texture generation flag.
+.IP o
+Typically, you will NOT want to use the "SPH" versions of the texture
+generation engine unless you really, really have an extrusion for which
+spherical coordinates are appropriate. Most uses of extrusions are best
+handled with the "FLAT" and "CYL" generation methods.
+.IP o
+User-defined texture generation callbacks are not currently
+implemented, but these should be very, very easy to hack in as desired.
+It should be easy to let your imagination run wild in here. Look at
+texgen.c -- what needs to be done should be obvious, I hope.  When in
+doubt, experiment.
+.SH BUGS
+Multiple threads using GLE share a single texture mode.
+.SH SEE ALSO
+gleExtrusion, gleSetJoinStyle
+.SH AUTHOR
+Linas Vepstas (linas@fc.net)
diff -Nur glut-3.7/man/gle/test/usr/share/man/man3/gleToroid.3xgle glut-3.7.mod/man/gle/test/usr/share/man/man3/gleToroid.3xgle
--- glut-3.7/man/gle/test/usr/share/man/man3/gleToroid.3xgle	1970-01-01 08:00:00.000000000 +0800
+++ glut-3.7.mod/man/gle/test/usr/share/man/man3/gleToroid.3xgle	2011-04-09 14:03:58.359996248 +0800
@@ -0,0 +1,48 @@
+.\"
+.\" GLE Tubing & Extrusions Library Documentation 
+.\"
+.TH gleToroid 3GLE "3.6" "GLE" "GLE"
+.SH NAME
+gleToroid - Generalized torus, lathe with circle contour.
+.SH SYNTAX
+.nf
+.LP
+void gleToroid (gleDouble rToroid,
+                gleDouble up[3],
+                gleDouble startRadius,
+                gleDouble drdTheta,
+                gleDouble startZ,
+                gleDouble dzdTheta,
+                gleDouble startXform[2][3],
+                gleDouble dXformdTheta[2][3],
+                gleDouble startTheta,
+                gleDouble sweepTheta);
+.fi
+.SH ARGUMENTS
+.IP \fIrToroid\fP 1i
+circle contour (torus) radius
+.IP \fIstartRadius\fP 1i
+spiral starts in x-y plane
+.IP \fIdrdTheta\fP 1i
+change in radius per revolution
+.IP \fIstartZ\fP 1i
+starting z value
+.IP \fIdzdTheta\fP 1i
+change in Z per revolution
+.IP \fIstartXform\fP 1i
+starting contour affine transformation
+.IP \fIdXformdTheta\fP 1i
+tangent change xform per revolution
+.IP \fIstartTheta\fP 1i
+start angle in x-y plane
+.IP \fIsweepTheta\fP 1i
+degrees to spiral around
+.SH DESCRIPTION
+
+Generalized Torus. Similar to gleLathe, except contour is a circle.
+Uses gleLathe to draw.
+
+.SH SEE ALSO
+gleSpiral, gleHelicoid
+.SH AUTHOR
+Linas Vepstas (linas@fc.net)
diff -Nur glut-3.7/man/gle/test/usr/share/man/man3/gleTwistExtrusion.3xgle glut-3.7.mod/man/gle/test/usr/share/man/man3/gleTwistExtrusion.3xgle
--- glut-3.7/man/gle/test/usr/share/man/man3/gleTwistExtrusion.3xgle	1970-01-01 08:00:00.000000000 +0800
+++ glut-3.7.mod/man/gle/test/usr/share/man/man3/gleTwistExtrusion.3xgle	2011-04-09 14:03:58.359996248 +0800
@@ -0,0 +1,66 @@
+.\"
+.\" GLE Tubing & Extrusions Library Documentation 
+.\"
+.TH gleTwistExtrusion 3GLE "3.6" "GLE" "GLE"
+.SH NAME
+gleTwistExtrusion - Extrude arbitrary 2D contour along arbitrary 3D path, specifying local rotations (twists).
+.SH SYNTAX
+.nf
+.LP
+void gleTwistExtrusion (int ncp,
+                gleDouble contour[][2],
+                gleDouble cont_normal[][2],
+                gleDouble up[3],
+                int npoints,
+                gleDouble point_array[][3],
+                float color_array[][3],
+                gleDouble twist_array[]);
+.fi
+.SH ARGUMENTS
+.IP \fIncp\fP 1i
+number of contour points
+.IP \fIcontour\fP 1i
+2D contour
+.IP \fIcont_normal\fP 1i
+2D contour normals
+.IP \fIup\fP 1i
+up vector for contour
+.IP \fInpoints\fP 1i
+numpoints in poly-line
+.IP \fIpoint_array\fP 1i
+polyline vertices
+.IP \fIcolor_array\fP 1i
+colors at polyline verts
+.IP \fItwist_array\fP 1i
+contour twists (in degrees)
+.SH DESCRIPTION
+
+Extrude arbitrary 2D contour along arbitrary 3D path, specifying local
+rotations (twists). As the contour is extruded, it will be twisted by
+the amount specified in the array "twist_array". The angles are
+measured in degrees, and the rotation is about the origin of the
+contour coordinate system.
+
+The argument "contour" specifies the 2D contour to be extruded, while
+the argument "point_array" specifies the path along which to extrude.
+The vector "up" defines the orientation of the contour y-axis in real
+3D space.
+
+Note that neither the very first segment, nor the very last segment are
+drawn. The first and last segments serve only to define the angle of
+the join at the very ends of the polyline. Thus, to draw one segment,
+three must be specified. To draw two segments, four must be specified,
+etc.
+
+The normal array may be NULL. If it is, normal vectors will NOT be
+automatically generated, and the object will look terrible when lit.
+
+The color array may be NULL. If NULL, the current color is used. If not
+NULL, the glColor3f() routine is used to set the color; therefore,
+specifying the glColorMaterial() subroutine before this primitive can
+be used to set diffuse, specular, ambient, etc. colors.
+
+.SH SEE ALSO
+gleExtrusion, gleSuperExtrusion
+.SH AUTHOR
+Linas Vepstas (linas@fc.net)
diff -Nur glut-3.7/man/glut/Makefile glut-3.7.mod/man/glut/Makefile
--- glut-3.7/man/glut/Makefile	1998-08-08 08:11:51.000000000 +0800
+++ glut-3.7.mod/man/glut/Makefile	2011-04-09 13:56:45.039996430 +0800
@@ -114,7 +114,7 @@
         VARLIBDIR = /var/lib
          SHLIBDIR = /usr/X11R6/lib
        LINTLIBDIR = $(USRLIBDIR)/lint
-          MANPATH = /usr/man
+          MANPATH = /usr/share/man
     MANSOURCEPATH = $(MANPATH)/man
            MANDIR = $(MANSOURCEPATH)1
         LIBMANDIR = $(MANSOURCEPATH)3
